---
title: "Rank Model Predictions | `r params$site` | `r params$model_id`"
format:
  html:
    toc: true
    toc-location: left
    page-layout: full
    self-contained: true
params:
  root_dir: "D:/fpe/sites"
  site: "WESTB0"
  model_id: "20230920"
editor_options: 
  chunk_output_type: console
---


```{r setup, echo=FALSE, warning=FALSE}
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(lubridate))
suppressPackageStartupMessages(library(glue))
suppressPackageStartupMessages(library(patchwork))

knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 12)

# params <- list(
#   root_dir = "D:/fpe/sites",
#   site = "MITCHB",
#   model_id = "20230928"
# )

site_dir <- file.path(params$root_dir, params$site)
model_dir <- file.path(site_dir, "models", params$model_id)

split_args_file <- file.path(model_dir, "input", "args.json")
metrics_file <- file.path(model_dir, "output", "metrics.csv")
pred_file <- file.path(model_dir, "transform", "predictions.csv")
station_file <- file.path(site_dir, "data", "station.json")
images_file <- file.path(site_dir, "data", "images.csv")
train_args_file <- file.path(model_dir, "output", "args.json")
train_file <- file.path(model_dir, "input", "pairs-train.csv")
val_file <- file.path(model_dir, "input", "pairs-val.csv")
test_file <- file.path(model_dir, "input", "pairs-test.csv")

split_labels <- c(
  "train" = "Train",
  "val" = "Val",
  "test" = "Test",
  "na" = "Not Annotated"
)
```

```{r load}
stn <- jsonlite::read_json(station_file)
split_args <- jsonlite::read_json(split_args_file)
if (split_args$method == "oracle") {
  split_args$num_val_pairs <- split_args$num_eval_pairs
  split_args$num_test_pairs <- split_args$num_eval_pairs
  split_args$notes <- "N/A"
}
train_args <- jsonlite::read_json(train_args_file)

metrics <- read_csv(metrics_file, show_col_types = FALSE)

images <- read_csv(images_file, show_col_types = FALSE)

pairs_train <- read_csv(train_file, show_col_types = FALSE)
pairs_val <- read_csv(val_file, show_col_types = FALSE)
pairs_test <- read_csv(test_file, show_col_types = FALSE)

pairs <- bind_rows(
  train = pairs_train,
  val = pairs_val,
  test = pairs_test,
  .id = "split"
)
pairs <- bind_rows(
  `1` = select(pairs, split, image_id = image_id_1, timestamp = timestamp_1, label = label_1),
  `2` = select(pairs, split, image_id = image_id_2, timestamp = timestamp_2, label = label_2),
  .id = "i"
)
splits <- pairs %>% 
  select(timestamp, split) %>% 
  distinct()

pred <- read_csv(pred_file, show_col_types = FALSE) %>%
  mutate(
    timestamp = with_tz(timestamp, tzone = "US/Eastern"),
    date = as_date(timestamp),
    hour = hour(timestamp),
    rank_obs = rank(flow_cfs, na.last = "keep") / n(),
    rank_pred = rank(score) / n(),
    rank_resid = (rank_obs - rank_pred)
  ) %>% 
  left_join(
    splits, by = "timestamp"
  ) %>% 
  mutate(
    split = coalesce(split, "na"),
    split = factor(split, levels = c("train", "val", "test", "na"))
  )
pred <- pred %>% 
  complete(date = seq.Date(min(pred$date), max(pred$date), by = "1 day")) %>%
  mutate(
    timestamp = coalesce(timestamp, as.POSIXct(date))
  )

pred_day <- pred %>%
  filter(!is.na(score)) %>% 
  group_by(date) %>%
  summarise(
    flow_cfs = mean(flow_cfs),
    score = mean(score),
    .groups = "drop"
  ) %>%
  mutate(
    rank_obs = rank(flow_cfs, na.last = "keep") / n(),
    rank_pred = rank(score) / n()
  ) %>% 
  left_join(
    pred %>%
      select(date, split) %>%
      filter(!is.na(split), split != "na") %>%
      distinct(),
    by = "date"
  ) %>% 
  complete(date = seq.Date(min(pred$date), max(pred$date), by = "1 day")) %>% 
  mutate(split = factor(coalesce(split, "na"), levels = levels(pred$split)))

if (any(!is.na(pred$flow_cfs))) {
  safe_cor <- possibly(cor, otherwise = NA_real_)
  tau <- pred %>% 
    bind_rows(
      pred %>% 
        transmute(
          split = "total",
          flow_cfs,
          score
        )
    ) %>% 
    filter(!is.na(score)) %>% 
    group_by(split) %>% 
    summarise(
      n = sum(!is.na(score)),
      tau = safe_cor(flow_cfs, score, method = "kendall", use = "complete.obs")
    ) %>%
    select(split, tau) %>% 
    deframe()
  
  tau_day <- pred_day %>% 
    bind_rows(
      pred_day %>% 
        transmute(
          split = "total",
          flow_cfs,
          score
        )
    ) %>% 
    filter(!is.na(score)) %>% 
    group_by(split) %>% 
    summarise(
      n = sum(!is.na(score)),
      tau = safe_cor(flow_cfs, score, method = "kendall", use = "complete.obs")
    ) %>%
    select(split, tau) %>% 
    deframe()
} else {
  pred$rank_obs <- NA_real_
  pred$rank_resid <- NA_real_
  pred_day$rank_obs <- NA_real_
  pred_day$rank_resid <- NA_real_

  tau <- list(
    train = NA_real_,
    val = NA_real_,
    test = NA_real_,
    na = NA_real_,
    total = NA_real_
  )
  tau_day <- list(
    train = NA_real_,
    val = NA_real_,
    test = NA_real_,
    na = NA_real_,
    total = NA_real_
  )
}

```

```txt
Report Generated: `r Sys.time()`

Station:   `r stn$name`
Model ID:  `r params$model_id`
Folder:    `r model_dir`

Dataset:
  Start:    `r min(pred$timestamp)`
  End:      `r max(pred$timestamp)`
  # Images: `r scales::comma(nrow(pred))`

Annotations:
  Method:        `r split_args$method`
  Margin:        `r if_else(split_args$method == "oracle", paste0(split_args$margin, " (", split_args$margin_mode, ")"), "N/A")`
  # Train Pairs: `r split_args$num_train_pairs`
  # Val Pairs:   `r split_args$num_val_pairs`
  # Test Pairs:  `r split_args$num_test_pairs`
  Notes:         `r split_args$notes`

Training Params:
  # Epochs:      `r train_args$epochs`
  Learn Rate:    `r train_args$lr`

Performance (Kendall Tau):      
  Train:         `r sprintf("%.2f", tau["train"])`
  Val:           `r sprintf("%.2f", tau["val"])`
  Test:          `r sprintf("%.2f", tau["test"])`
  Not Annotated: `r sprintf("%.2f", tau["na"])`
  Overall:       `r sprintf("%.2f", tau["total"])`
```

## Training Loss

```{r train_loss, fig.width=8, fig.height=4}
metrics %>% 
  mutate(final = val_loss == min(val_loss)) %>% 
  pivot_longer(-c(epoch, final), names_to = "split") %>% 
  mutate(
    split = factor(str_remove(split, "_loss"), levels = c("train", "val", "test"))
  ) %>% 
  ggplot(aes(epoch, value, color = split)) +
  geom_point() +
  geom_line() +
  geom_point(
    data = ~ filter(., final),
    aes(size = "Final Model"),
    shape = 21, color = "black"
  ) +
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
  scale_y_continuous(limits = c(0, NA), expand = expansion(c(0, 0.05))) +
  scale_color_brewer("Split", palette = "Set1", labels = split_labels) +
  scale_size_manual(values = 5) +
  guides(
    color = guide_legend(order = 1),
    size = guide_legend(order = 2)
  ) +
  labs(
    x = "Epoch",
    y = "Loss",
    size = NULL
  ) +
  theme_bw()
```


## Timeseries

```{r ts_value, fig.height=10}
p_q <- pred %>%
  # transmute(timestamp, `log(flow_cfs)` = log10(flow_cfs), score) %>%
  # pivot_longer(-timestamp) %>%
  ggplot(aes(timestamp, log10(flow_cfs))) +
  geom_line() +
  # geom_point(
  #   data = pairs %>% 
  #     mutate(
  #       flow = log10(label),
  #       name = "log(flow_cfs)",
  #       split = factor(split, levels = levels(pred$split))
  #     ),
  #   aes(y = flow, color = split),
  #   size = 0.5
  # ) +
  scale_x_datetime(date_labels = "%b %Y", date_breaks = "2 months", expand = expansion()) +
  # facet_wrap(vars(name), scales = "free_y", ncol = 1, strip.position = "left", labeller = labeller(
  #   name = c("log(flow_cfs)" = "Obs log10(Flow [cfs])", "score" = "Pred Score")
  # )) +
  labs(x = "Date", y = "Obs log10(Flow [cfs])") +
  # scale_color_brewer("Split", palette = "Set1") +
  labs(
    # x = "Date",
    # title = "Timeseries of Observed Flow and Predicted Scores"
  ) +
  # guides(color = guide_legend(override.aes = list(size = 1))) +
  theme_bw() +
  theme(
    # strip.placement = "outside",
    # strip.background = element_blank(),
    # strip.text = element_text(size = 12)
  )

p_s <- pred %>%
  # transmute(timestamp, `log(flow_cfs)` = log10(flow_cfs), score) %>%
  # pivot_longer(-timestamp) %>%
  ggplot(aes(timestamp, score)) +
  geom_line() +
  # geom_point(
  #   data = pairs %>% 
  #     mutate(
  #       flow = log10(label),
  #       name = "log(flow_cfs)",
  #       split = factor(split, levels = levels(pred$split))
  #     ),
  #   aes(y = flow, color = split),
  #   size = 0.5
  # ) +
  scale_x_datetime(date_labels = "%b %Y", date_breaks = "2 months", expand = expansion()) +
  # facet_wrap(vars(name), scales = "free_y", ncol = 1, strip.position = "left", labeller = labeller(
  #   name = c("log(flow_cfs)" = "Obs log10(Flow [cfs])", "score" = "Pred Score")
  # )) +
  labs(x = "Date", y = "Pred Score") +
  # scale_color_brewer("Split", palette = "Set1") +
  labs(
    # x = "Date",
    # title = "Timeseries of Observed Flow and Predicted Scores"
  ) +
  # guides(color = guide_legend(override.aes = list(size = 1))) +
  theme_bw() +
  theme(
    # strip.placement = "outside",
    # strip.background = element_blank(),
    # strip.text = element_text(size = 12)
  )
p_splits <- pred %>% 
  filter(!is.na(split), split != "na") %>% 
  ggplot(aes(timestamp)) +
  geom_rug(aes(color = split), length = unit(100, "mm")) +
  scale_x_datetime(
    date_labels = "%b %Y", date_breaks = "2 months", expand = expansion(),
    limits = range(pred$timestamp)
  ) +
  scale_color_brewer("Split", palette = "Set1", drop = FALSE, labels = split_labels) +
  labs(x = NULL, y = "Annotated\nImages") +
  theme_bw()
p_na <- pred %>% 
  filter(!is.na(split), split == "na") %>% 
  ggplot(aes(timestamp)) +
  geom_rug(aes(color = split), length = unit(100, "mm")) +
  scale_x_datetime(
    date_labels = "%b %Y", date_breaks = "2 months", expand = expansion(),
    limits = range(pred$timestamp)
  ) +
  scale_color_brewer("Split", palette = "Set1", drop = FALSE, labels = split_labels) +
  labs(x = NULL, y = "Unannotated\nImages") +
  theme_bw()

wrap_plots(p_q, p_splits, p_na, p_s, ncol = 1, heights = c(0.3, 0.05, 0.05, 0.3)) +
  plot_layout(guides = "collect") +
  plot_annotation(title = "Timeseries of Observed Flow, Photo Timestamps, and Predicted Scores")
```

```{r ts_rank, fig.height=4}
pred %>%
  filter(!is.na(split)) %>% 
  ggplot(aes(timestamp)) +
  geom_line(aes(y = rank_pred, linetype = "Predicted"), color = "black") +
  geom_point(aes(y = rank_obs, color = split), size = 1, alpha = 0.5) +
  scale_color_brewer("Split", palette = "Set1", labels = split_labels) +
  scale_x_datetime(date_labels = "%b %Y", date_breaks = "2 months", expand = expansion()) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 8), labels = scales::percent_format(accuracy = 1), expand = expansion()) +
  guides(
    color = guide_legend(override.aes = list(size = 1, alpha = 1))
  ) +
  labs(
    x = "Date",
    y = "Percentile Rank",
    linetype = NULL,
    title = "Timeseries of Observed and Predicted Ranks",
  ) +
  theme_bw()
```

## Scatter Plots

```{r splot, fig.height=12}
p1 <- pred %>%
  filter(!is.na(split)) %>% 
  ggplot(aes(flow_cfs, score)) +
  geom_point(aes(color = split), size = 0.5, alpha = 0.5) +
  geom_smooth(method = "lm", se = FALSE, formula = y ~ x, color = "black") +
  scale_color_brewer("Split", palette = "Set1", labels = split_labels) +
  scale_x_log10() +
  labs(
    x = "Obs Flow (cfs)",
    y = "Predicted Score",
    title = "Observed Flow vs Predicted Score"
  ) +
  guides(color = guide_legend(override.aes = list(size = 1))) +
  facet_wrap(vars(split), ncol = 1, labeller = labeller(split = split_labels)) +
  theme_bw() +
  theme(aspect.ratio = 1)
p2 <- pred %>%
  filter(!is.na(split)) %>% 
  ggplot(aes(rank_obs, rank_pred)) +
  geom_point(aes(color = split), size = 0.5, alpha = 0.5) +
  geom_abline(color = "black", linewidth = 1) +
  scale_color_brewer("Split", palette = "Set1", labels = split_labels) +
  scale_x_continuous(breaks = scales::pretty_breaks(), labels = scales::percent_format(accuracy = 1), expand = expansion(), limits = c(0, NA)) +
  scale_y_continuous(breaks = scales::pretty_breaks(), labels = scales::percent_format(accuracy = 1), expand = expansion(), limits = c(0, NA)) +
  labs(
    x = "Observed Rank",
    y = "Predicted Rank",
    title = "Observed vs. Predicted Ranks"
  ) +
  guides(color = guide_legend(override.aes = list(size = 1))) +
  facet_wrap(vars(split), ncol = 1, labeller = labeller(split = split_labels)) +
  theme_bw() +
  theme(aspect.ratio = 1)
if (any(!is.na(pred$flow_cfs))) {
  wrap_plots(p1, p2, nrow = 1) +
    plot_layout(guides = "collect")
} else {
  print("No obs.")
}
```

## Residuals

```{r resid_ts}
pred %>%
  filter(!is.na(split)) %>% 
  ggplot(aes(timestamp, rank_resid)) +
  geom_hline(yintercept = 0) +
  geom_point(aes(color = split), size = 0.5, alpha = 0.5) +
  scale_color_brewer("Split", palette = "Set1", labels = split_labels) +
  scale_x_datetime(date_labels = "%b %Y", date_breaks = "2 months", expand = expansion()) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 8), labels = scales::percent_format(accuracy = 1), expand = expansion()) +
  guides(color = guide_legend(override.aes = list(size = 1))) +
  facet_wrap(vars(split), labeller = labeller(split = split_labels)) +
  labs(
    x = "Date",
    y = "Percentile Rank Residual (Obs-Pred)",
    title = "Timeseries of Percentile Rank Residuals (Obs - Pred)"
  ) +
  theme_bw()
```

```{r resid_splot, fig.height = 12}
p1 <- pred %>%
  filter(!is.na(split)) %>% 
  ggplot(aes(rank_pred, rank_resid)) +
  geom_hline(yintercept = 0) +
  geom_point(size = 0.2) +
  geom_point(aes(color = split), size = 0.5, alpha = 0.5) +
  scale_color_brewer("Split", palette = "Set1", labels = split_labels) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 8), labels = scales::percent_format(accuracy = 1), expand = expansion()) +
  scale_x_continuous(breaks = scales::pretty_breaks(n = 4), labels = scales::percent_format(accuracy = 1), expand = expansion(), limits = c(0, 1)) +
  guides(color = guide_legend(override.aes = list(size = 1))) +
  facet_wrap(vars(split), ncol = 1, labeller = labeller(split = split_labels)) +
  labs(
    x = "Predicted Percentile Rank",
    y = "Percentile Rank Residual (Obs-Pred)",
    title = "Percentile Rank Residuals vs Fitted"
  ) +
  theme_bw() +
  theme(aspect.ratio = 1)

p2 <- pred %>%
  filter(!is.na(rank_resid)) %>% 
  ggplot(aes(hour(timestamp), rank_resid)) +
  geom_hline(yintercept = 0) +
  geom_jitter(aes(color = split), height = 0, size = 0.5, alpha = 0.5) +
  scale_color_brewer("Split", palette = "Set1", labels = split_labels) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 6), labels = scales::percent_format(accuracy = 1), expand = expansion()) +
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
  guides(color = guide_legend(override.aes = list(size = 1))) +
  facet_wrap(vars(split), ncol = 1, labeller = labeller(split = split_labels)) +
  labs(
    x = "Hour of Day",
    y = "Percentile Rank Residual (Obs-Pred)",
    title = "Diurnal Pattern"
  ) +
  theme_bw() +
  theme(aspect.ratio = 1)

p3 <- pred %>%
  filter(!is.na(rank_resid)) %>% 
  ggplot(aes(ymd(20001231) + days(yday(timestamp)), rank_resid)) +
  geom_hline(yintercept = 0) +
  geom_jitter(aes(color = split), height = 0, size = 0.5, alpha = 0.5) +
  scale_color_brewer("Split", palette = "Set1", labels = split_labels) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 8), labels = scales::percent_format(accuracy = 1), expand = expansion()) +
  scale_x_date(date_breaks = "2 months", date_labels = "%b", limits = ymd(c(20010101, 20011231)), expand = expansion()) +
  guides(color = guide_legend(override.aes = list(size = 1))) +
  facet_wrap(vars(split), ncol = 1, labeller = labeller(split = split_labels)) +
  labs(
    x = "Day of Year",
    y = "Percentile Rank Residual (Obs-Pred)",
    title = "Seasonal Pattern"
  ) +
  theme_bw() +
  theme(aspect.ratio = 1)
if (any(!is.na(pred$flow_cfs))) {
  wrap_plots(p1, p2, p3, nrow = 1) +
    plot_layout(guides = "collect")
} else {
  print("No obs.")
}
```


## Daily Aggregation

Note: excludes nighttime images and observed flows

```text
Performance (Kendall Tau):      
  Train:         `r sprintf("%.2f", tau_day["train"])`
  Val:           `r sprintf("%.2f", tau_day["val"])`
  Test:          `r sprintf("%.2f", tau_day["test"])`
  Not Annotated: `r sprintf("%.2f", tau_day["na"])`
  Overall:       `r sprintf("%.2f", tau_day["total"])`
```

```{r day_ts, fig.height=4}
pred_day %>%
  ggplot(aes(date)) +
  geom_step(aes(y = rank_pred, linetype = "Predicted"), color = "black") +
  geom_point(aes(y = rank_obs, color = split), size = 1) +
  scale_color_brewer("Split", palette = "Set1", labels = split_labels) +
  scale_x_date(date_labels = "%b %Y", date_breaks = "2 months", expand = expansion()) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 8), labels = scales::percent_format(accuracy = 1), expand = expansion()) +
  labs(
    x = "Date",
    y = "Percentile Rank",
    linetype = NULL,
    title = "Daily Timeseries of Observed and Predicted Ranks"
  ) +
  theme_bw()
```


```{r day_splot, fig.height=4}
pred_day %>%
  ggplot(aes(rank_obs, rank_pred)) +
  geom_point(aes(color = split), size = 1, alpha = 0.5) +
  geom_abline(color = "black") +
  scale_color_brewer("Split", palette = "Set1", labels = split_labels) +
  scale_x_continuous(breaks = scales::pretty_breaks(), expand = expansion(), limits = c(0, 1), labels = scales::percent) +
  scale_y_continuous(breaks = scales::pretty_breaks(), expand = expansion(), limits = c(0, 1), labels = scales::percent) +
  labs(
    x = "Observed Rank",
    y = "Predicted Rank",
    title = "Observed vs. Predicted Daily Ranks"
  ) +
  facet_wrap(vars(split), nrow = 1, labeller = labeller(split = split_labels)) +
  theme_bw() +
  theme(aspect.ratio = 1)
```
