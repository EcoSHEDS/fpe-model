ggplot(aes(yday(timestamp), rank_resid)) +
geom_hline(yintercept = 0) +
geom_jitter(height = 0, size = 0.2) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 8), labels = scales::percent_format(accuracy = 1), expand = expansion()) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
labs(
x = "Julian Day",
y = "Percentile Rank Residual (Obs-Pred)",
title = "Percentile Rank Residuals vs Julian Day (Seasonal Pattern)",
subtitle = x_subtitle
) +
theme_bw() +
theme(aspect.ratio = 1)
pred %>%
ggplot(aes(yday(timestamp), rank_resid)) +
geom_hline(yintercept = 0) +
geom_jitter(height = 0, size = 0.2) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 8), labels = scales::percent_format(accuracy = 1), expand = expansion()) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
labs(
x = "Julian Day",
y = "Percentile Rank Residual (Obs-Pred)",
title = "Percentile Rank Residuals vs Julian Day (Seasonal Pattern)"
) +
theme_bw() +
theme(aspect.ratio = 1)
pred %>%
ggplot(aes(ymd(20001231) + days(yday(timestamp)), rank_resid)) +
geom_hline(yintercept = 0) +
geom_jitter(height = 0, size = 0.2) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 8), labels = scales::percent_format(accuracy = 1), expand = expansion()) +
scale_x_date(date_breaks = "2 months", date_labels = "%b %d") +
labs(
x = "Day of Year",
y = "Percentile Rank Residual (Obs-Pred)",
title = "Percentile Rank Residuals vs Julian Day (Seasonal Pattern)"
) +
theme_bw() +
theme(aspect.ratio = 1)
pred %>%
filter(!is.na(rank_resid)) +
ggplot(aes(ymd(20001231) + days(yday(timestamp)), rank_resid)) +
geom_hline(yintercept = 0) +
geom_jitter(height = 0, size = 0.2) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 8), labels = scales::percent_format(accuracy = 1), expand = expansion()) +
scale_x_date(date_breaks = "2 months", date_labels = "%b %d") +
labs(
x = "Day of Year",
y = "Percentile Rank Residual (Obs-Pred)",
title = "Percentile Rank Residuals vs Julian Day (Seasonal Pattern)"
) +
theme_bw() +
theme(aspect.ratio = 1)
pred %>%
filter(!is.na(rank_resid)) %>%
ggplot(aes(ymd(20001231) + days(yday(timestamp)), rank_resid)) +
geom_hline(yintercept = 0) +
geom_jitter(height = 0, size = 0.2) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 8), labels = scales::percent_format(accuracy = 1), expand = expansion()) +
scale_x_date(date_breaks = "2 months", date_labels = "%b %d") +
labs(
x = "Day of Year",
y = "Percentile Rank Residual (Obs-Pred)",
title = "Percentile Rank Residuals vs Julian Day (Seasonal Pattern)"
) +
theme_bw() +
theme(aspect.ratio = 1)
pred_day %>%
ggplot(aes(date)) +
geom_step(aes(y = rank_obs / nrow(x), color = "Obs")) +
geom_point(aes(y = rank_pred / nrow(x), color = "Pred"), size = 1) +
scale_color_brewer(NULL, palette = "Set1") +
scale_x_date(date_labels = "%b %Y", date_breaks = "2 months", expand = expansion()) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 8), labels = scales::percent_format(accuracy = 1), expand = expansion()) +
guides(
color = guide_legend(override.aes = list(linetype = c(1, 0), size = c(0, 2), shape = c(0, 16)))
) +
labs(
x = "Date",
y = "Percentile Rank",
title = "Daily Timeseries of Observed and Predicted Ranks",
subtitle = x_subtitle
) +
theme_bw()
pred_day %>%
ggplot(aes(date)) +
geom_step(aes(y = rank_obs / nrow(x), color = "Obs")) +
geom_point(aes(y = rank_pred / nrow(x), color = "Pred"), size = 1) +
scale_color_brewer(NULL, palette = "Set1") +
scale_x_date(date_labels = "%b %Y", date_breaks = "2 months", expand = expansion()) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 8), labels = scales::percent_format(accuracy = 1), expand = expansion()) +
guides(
color = guide_legend(override.aes = list(linetype = c(1, 0), size = c(0, 2), shape = c(0, 16)))
) +
labs(
x = "Date",
y = "Percentile Rank",
title = "Daily Timeseries of Observed and Predicted Ranks"
) +
theme_bw()
pred_day %>%
ggplot(aes(date)) +
geom_step(aes(y = rank_obs, color = "Obs")) +
geom_point(aes(y = rank_pred, color = "Pred"), size = 1) +
scale_color_brewer(NULL, palette = "Set1") +
scale_x_date(date_labels = "%b %Y", date_breaks = "2 months", expand = expansion()) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 8), labels = scales::percent_format(accuracy = 1), expand = expansion()) +
guides(
color = guide_legend(override.aes = list(linetype = c(1, 0), size = c(0, 2), shape = c(0, 16)))
) +
labs(
x = "Date",
y = "Percentile Rank",
title = "Daily Timeseries of Observed and Predicted Ranks"
) +
theme_bw()
pred_day
pred_day <- pred %>%
filter(!is.na(score)) %>%
group_by(date) %>%
summarise(
flow_cfs = mean(flow_cfs),
score = mean(score)
) %>%
mutate(
rank_obs = rank(flow_cfs) / n(),
rank_pred = rank(score) / n()
) %>%
complete(date = seq.Date(min(pred$date), max(pred$date), by = "1 day"))
pred_day %>%
ggplot(aes(date)) +
geom_step(aes(y = rank_obs / nrow(x), color = "Obs")) +
geom_point(aes(y = rank_pred / nrow(x), color = "Pred"), size = 1) +
scale_color_brewer(NULL, palette = "Set1") +
scale_x_date(date_labels = "%b %Y", date_breaks = "2 months", expand = expansion()) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 8), labels = scales::percent_format(accuracy = 1), expand = expansion()) +
guides(
color = guide_legend(override.aes = list(linetype = c(1, 0), size = c(0, 2), shape = c(0, 16)))
) +
labs(
x = "Date",
y = "Percentile Rank",
title = "Daily Timeseries of Observed and Predicted Ranks",
subtitle = x_subtitle
) +
theme_bw()
pred_day %>%
ggplot(aes(date)) +
geom_step(aes(y = rank_obs / nrow(x), color = "Obs")) +
geom_point(aes(y = rank_pred / nrow(x), color = "Pred"), size = 1) +
scale_color_brewer(NULL, palette = "Set1") +
scale_x_date(date_labels = "%b %Y", date_breaks = "2 months", expand = expansion()) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 8), labels = scales::percent_format(accuracy = 1), expand = expansion()) +
guides(
color = guide_legend(override.aes = list(linetype = c(1, 0), size = c(0, 2), shape = c(0, 16)))
) +
labs(
x = "Date",
y = "Percentile Rank",
title = "Daily Timeseries of Observed and Predicted Ranks"
) +
theme_bw()
pred_day %>%
ggplot(aes(date)) +
geom_step(aes(y = rank_obs, color = "Obs")) +
geom_point(aes(y = rank_pred, color = "Pred"), size = 1) +
scale_color_brewer(NULL, palette = "Set1") +
scale_x_date(date_labels = "%b %Y", date_breaks = "2 months", expand = expansion()) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 8), labels = scales::percent_format(accuracy = 1), expand = expansion()) +
guides(
color = guide_legend(override.aes = list(linetype = c(1, 0), size = c(0, 2), shape = c(0, 16)))
) +
labs(
x = "Date",
y = "Percentile Rank",
title = "Daily Timeseries of Observed and Predicted Ranks"
) +
theme_bw()
pred_day %>%
ggplot(aes(rank_obs, rank_pred)) +
geom_point(size = 0.1) +
geom_abline(color = "orangered") +
scale_x_continuous(breaks = scales::pretty_breaks(), expand = expansion(), limits = c(0, NA)) +
scale_y_continuous(breaks = scales::pretty_breaks(), expand = expansion(), limits = c(0, NA)) +
labs(
x = "Observed Rank",
y = "Predicted Rank",
title = "Observed vs. Predicted Ranks"
) +
theme_bw() +
theme(aspect.ratio = 1)
pred_day %>%
ggplot(aes(rank_obs, rank_pred)) +
geom_point(size = 0.5) +
geom_abline(color = "orangered") +
scale_x_continuous(breaks = scales::pretty_breaks(), expand = expansion(), limits = c(0, NA)) +
scale_y_continuous(breaks = scales::pretty_breaks(), expand = expansion(), limits = c(0, NA)) +
labs(
x = "Observed Rank",
y = "Predicted Rank",
title = "Observed vs. Predicted Daily Ranks"
) +
theme_bw() +
theme(aspect.ratio = 1)
p1 <- pred %>%
ggplot(aes(rank_pred, rank_resid)) +
geom_hline(yintercept = 0) +
geom_point(size = 0.2) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 8), labels = scales::percent_format(accuracy = 1), expand = expansion()) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 8), labels = scales::percent_format(accuracy = 1), expand = expansion(), limits = c(0, 1)) +
labs(
x = "Predicted Percentile Rank",
y = "Percentile Rank Residual (Obs-Pred)",
title = "Percentile Rank Residuals vs Fitted"
) +
theme_bw() +
theme(aspect.ratio = 1)
p2 <- pred %>%
filter(!is.na(rank_resid)) %>%
ggplot(aes(hour(timestamp), rank_resid)) +
geom_hline(yintercept = 0) +
geom_jitter(height = 0, size = 0.2) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 8), labels = scales::percent_format(accuracy = 1), expand = expansion()) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
labs(
x = "Hour of Day",
y = "Percentile Rank Residual (Obs-Pred)",
title = "Diurnal Pattern"
) +
theme_bw() +
theme(aspect.ratio = 1)
p3 <- pred %>%
filter(!is.na(rank_resid)) %>%
ggplot(aes(ymd(20001231) + days(yday(timestamp)), rank_resid)) +
geom_hline(yintercept = 0) +
geom_jitter(height = 0, size = 0.2) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 8), labels = scales::percent_format(accuracy = 1), expand = expansion()) +
scale_x_date(date_breaks = "2 months", date_labels = "%b %d") +
labs(
x = "Day of Year",
y = "Percentile Rank Residual (Obs-Pred)",
title = "Seasonal"
) +
theme_bw() +
theme(aspect.ratio = 1)
p1 <- pred %>%
ggplot(aes(flow_cfs, score)) +
geom_point(size = 0.1) +
geom_smooth(se = FALSE, formula = y ~ x) +
scale_x_log10() +
labs(
x = "Obs Flow (cfs)",
y = "Predicted Score",
title = "Observed Flow vs Predicted Score"
) +
theme_bw() +
theme(aspect.ratio = 1)
p2 <- pred %>%
ggplot(aes(rank_obs, rank_pred)) +
geom_point(size = 0.1) +
geom_abline(color = "orangered") +
scale_x_continuous(breaks = scales::pretty_breaks(), expand = expansion(), limits = c(0, NA)) +
scale_y_continuous(breaks = scales::pretty_breaks(), expand = expansion(), limits = c(0, NA)) +
labs(
x = "Observed Rank",
y = "Predicted Rank",
title = "Observed vs. Predicted Ranks"
) +
theme_bw() +
theme(aspect.ratio = 1)
p1 | p2
p1 <- pred %>%
ggplot(aes(flow_cfs, score)) +
geom_point(size = 0.1) +
geom_smooth(method = "loess", se = FALSE, formula = y ~ x, color = "orangered") +
scale_x_log10() +
labs(
x = "Obs Flow (cfs)",
y = "Predicted Score",
title = "Observed Flow vs Predicted Score"
) +
theme_bw() +
theme(aspect.ratio = 1)
p2 <- pred %>%
ggplot(aes(rank_obs, rank_pred)) +
geom_point(size = 0.1) +
geom_abline(color = "orangered") +
scale_x_continuous(breaks = scales::pretty_breaks(), expand = expansion(), limits = c(0, NA)) +
scale_y_continuous(breaks = scales::pretty_breaks(), expand = expansion(), limits = c(0, NA)) +
labs(
x = "Observed Rank",
y = "Predicted Rank",
title = "Observed vs. Predicted Ranks"
) +
theme_bw() +
theme(aspect.ratio = 1)
p1 | p2
p1 <- pred %>%
ggplot(aes(flow_cfs, score)) +
geom_point(size = 0.1) +
geom_smooth(method = "gam", se = FALSE, formula = y ~ x, color = "orangered") +
scale_x_log10() +
labs(
x = "Obs Flow (cfs)",
y = "Predicted Score",
title = "Observed Flow vs Predicted Score"
) +
theme_bw() +
theme(aspect.ratio = 1)
p1 <- pred %>%
ggplot(aes(flow_cfs, score)) +
geom_point(size = 0.1) +
geom_smooth(method = "loess", span = 0.9, se = FALSE, formula = y ~ x, color = "orangered") +
scale_x_log10() +
labs(
x = "Obs Flow (cfs)",
y = "Predicted Score",
title = "Observed Flow vs Predicted Score"
) +
theme_bw() +
theme(aspect.ratio = 1)
p2 <- pred %>%
ggplot(aes(rank_obs, rank_pred)) +
geom_point(size = 0.1) +
geom_abline(color = "orangered") +
scale_x_continuous(breaks = scales::pretty_breaks(), expand = expansion(), limits = c(0, NA)) +
scale_y_continuous(breaks = scales::pretty_breaks(), expand = expansion(), limits = c(0, NA)) +
labs(
x = "Observed Rank",
y = "Predicted Rank",
title = "Observed vs. Predicted Ranks"
) +
theme_bw() +
theme(aspect.ratio = 1)
p1 | p2
p2 <- pred %>%
ggplot(aes(rank_obs, rank_pred)) +
geom_point(size = 0.1) +
geom_abline(color = "orangered", linewidth = 1) +
scale_x_continuous(breaks = scales::pretty_breaks(), expand = expansion(), limits = c(0, NA)) +
scale_y_continuous(breaks = scales::pretty_breaks(), expand = expansion(), limits = c(0, NA)) +
labs(
x = "Observed Rank",
y = "Predicted Rank",
title = "Observed vs. Predicted Ranks"
) +
theme_bw() +
theme(aspect.ratio = 1)
p1 | p2
p2 <- pred %>%
ggplot(aes(rank_obs, rank_pred)) +
geom_point(size = 0.1) +
geom_abline(color = "orangered", linewidth = 1) +
scale_x_continuous(breaks = scales::pretty_breaks(), labels = scales::percent_format(accuracy = 1), expand = expansion(), limits = c(0, NA)) +
scale_y_continuous(breaks = scales::pretty_breaks(), labels = scales::percent_format(accuracy = 1), expand = expansion(), limits = c(0, NA)) +
labs(
x = "Observed Rank",
y = "Predicted Rank",
title = "Observed vs. Predicted Ranks"
) +
theme_bw() +
theme(aspect.ratio = 1)
p1 | p2
?quarto_render
?quarto_render
quarto::quarto_render(
input = "qmd/rank-predictions.qmd",
output_file = "D:/fpe/sites/AVERYBB/transform/predictions-AVERYBB.html",
execute_params = list(
site = "AVERYBB"
)
)
quarto::quarto_render(
input = "qmd/rank-predictions.qmd",
output_file = "D:\fpe\sites\AVERYBB\transform\predictions-AVERYBB.html",
quarto::quarto_render(
input = "qmd/rank-predictions.qmd",
output_file = "D:\\fpe\\sites\\AVERYBB\\transform\\predictions-AVERYBB.html",
execute_params = list(
site = "AVERYBB"
)
)
quarto::quarto_render(
input = "qmd/rank-predictions.qmd",
output_file = "predictions-AVERYBB.html",
execute_params = list(
site = "AVERYBB"
)
)
?file.copy
?file.copy
file.copy(output_file, file.path(root_dir, site, "transform"), overwrite = TRUE)
site <- "AVERYBB"
root_dir <- "D:/fpe/sites"
filename <- "predictions.csv"
output_file <- paste0("predictions-", site, ".html")
file.copy(output_file, file.path(root_dir, site, "transform"), overwrite = TRUE)
unlink(output_file)
site <- "AVERYBB"
root_dir <- "D:/fpe/sites"
filename <- "predictions.csv"
output_file <- paste0("predictions-", site, ".html")
quarto::quarto_render(
input = "qmd/rank-predictions.qmd",
output_file = output_file,
execute_params = list(
site = site,
root_dir = root_dir,
filename = filename
)
)
output_file <- paste0("qmd/predictions-", site, ".html")
quarto::quarto_render(
input = "qmd/rank-predictions.qmd",
output_file = output_file,
execute_params = list(
site = site,
root_dir = root_dir,
filename = filename
)
)
file.copy(output_file, file.path(root_dir, site, "transform"), overwrite = TRUE)
site <- "WESTB0"
root_dir <- "D:/fpe/sites"
filename <- "predictions.csv"
output_file <- paste0("qmd/predictions-", site, ".html")
quarto::quarto_render(
input = "qmd/rank-predictions.qmd",
output_file = output_file,
execute_params = list(
site = site,
root_dir = root_dir,
filename = filename
)
)
file.copy(output_file, file.path(root_dir, site, "transform"), overwrite = TRUE)
args_file <- file.path(params$root_dir, params$site, "data", "args.json")
args_file
args <- jsonlite::read_json(args_file)
args
args_file <- file.path(params$root_dir, params$site, "model", "output", "args.json")
args <- jsonlite::read_json(args_file)
args
args$margin
generate_report <- function (site, root_dir = "D:/fpe/sites", filename = "predictions.csv") {
output_file <- paste0("qmd/predictions-", site, ".html")
quarto::quarto_render(
input = "qmd/rank-predictions.qmd",
output_file = output_file,
execute_params = list(
site = site,
root_dir = root_dir,
filename = filename
)
)
file.copy(output_file, file.path(root_dir, site, "transform"), overwrite = TRUE)
print("Report saved:", file.path(root_dir, site, "transform", output_file))
}
generate_report("WESTB0")
generate_report("AVERYBB")
print(paste0("Report saved:", file.path(root_dir, site, "transform", output_file)))
generate_report("AVERYBB")
generate_report <- function (site, root_dir = "D:/fpe/sites", filename = "predictions.csv") {
output_file <- paste0("qmd/predictions-", site, ".html")
quarto::quarto_render(
input = "qmd/rank-predictions.qmd",
output_file = output_file,
execute_params = list(
site = site,
root_dir = root_dir,
filename = filename
)
)
file.copy(output_file, file.path(root_dir, site, "transform"), overwrite = TRUE)
print(paste0("Report saved:", file.path(root_dir, site, "transform", output_file)))
}
generate_report("WESTB0")
generate_report("GREENR")
generate_report <- function (site, root_dir = "D:/fpe/sites", filename = "predictions.csv") {
output_file <- paste0("qmd/predictions-", site, ".html")
quarto::quarto_render(
input = "qmd/rank-predictions.qmd",
output_file = output_file,
execute_params = list(
site = site,
root_dir = root_dir,
filename = filename
)
)
file.copy(output_file, file.path(root_dir, site, "transform"), overwrite = TRUE)
print(paste0("Report saved:", file.path(root_dir, site, "transform", output_file)))
}
generate_report <- function (site, root_dir = "D:/fpe/sites", filename = "predictions.csv") {
output_file <- paste0("qmd/predictions-", site, ".html")
quarto::quarto_render(
input = "qmd/rank-predictions.qmd",
output_file = output_file,
execute_params = list(
site = site,
root_dir = root_dir,
filename = filename
)
)
file.copy(output_file, file.path(root_dir, site, "transform"), overwrite = TRUE)
print(paste0("Report saved:", file.path(root_dir, site, "transform", output_file)))
}
generate_report("AVERYBB")
generate_report("WESTB0")
Sys.time()
generate_report("AVERYBB")
walk(c("AVERYBB", "WESTB0", "GREENR", "WESTKILL"), generate_report)
sapply(c("AVERYBB", "WESTB0", "GREENR", "WESTKILL"), generate_report)
