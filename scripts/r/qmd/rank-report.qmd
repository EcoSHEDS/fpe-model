---
title: "FPE Rank Model Diagnostics"
format:
  html:
    toc: true
    toc-location: left
    page-layout: full
    self-contained: true
params:
  directory: "/mnt/d/fpe/rank"
  station_id: 29
  model_code: "RANK-FLOW-20240403"
editor_options: 
  chunk_output_type: console
---


```{r setup, echo=FALSE, warning=FALSE}
suppressPackageStartupMessages({
  library(tidyverse)
  library(lubridate)
  library(glue)
  library(patchwork)
})

knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 12)

# params <- list(
#   directory = "/mnt/d/fpe/rank",
#   station_id = 29,
#   model_code = "RANK-FLOW-20240410"
# )

station_dir <- file.path(params$directory, params$station_id)
model_dir <- file.path(station_dir, "models", params$model_code)

station_file <- file.path(model_dir, "input", "station.json")
rank_input_file <- file.path(model_dir, "input", "rank-input.json")

images_file <- file.path(model_dir, "input", "images.csv")
annotations_file <- file.path(model_dir, "input", "annotations.csv")

train_args_file <- file.path(model_dir, "output", "args.json")
metrics_file <- file.path(model_dir, "output", "metrics.csv")

predictions_file <- file.path(model_dir, "transform", "predictions.csv")
pairs_file <- file.path(model_dir, "input", "pairs.csv")

split_labels <- c(
  "train" = "Train",
  "val" = "Val",
  "test-in" = "Test (In)",
  "test-out" = "Test (Out)",
  "test-total" = "Test (All)"
)
```

```{r load}
station <- jsonlite::read_json(station_file)
rank_input <- jsonlite::read_json(rank_input_file)
train_args <- jsonlite::read_json(train_args_file)
metrics <- read_csv(metrics_file, show_col_types = FALSE)
annotations <- read_csv(annotations_file, show_col_types = FALSE)
images <- read_csv(images_file, show_col_types = FALSE) %>% 
  mutate(
    timestamp = with_tz(timestamp, tzone = "US/Eastern"),
    date = as_date(timestamp),
    split = factor(split, levels = names(split_labels))
  )
pairs <- read_csv(pairs_file, show_col_types = FALSE)

predictions <- read_csv(predictions_file, show_col_types = FALSE) %>%
  mutate(
    timestamp = with_tz(timestamp, tzone = "US/Eastern"),
    date = as_date(timestamp),
    hour = hour(timestamp),
    has_rank = !is.na(value) & !is.na(score),
    log_value = log10(value)
    # rank_obs = rank(value, na.last = "keep") / n(),
    # rank_pred = rank(score) / n(),
    # rank_resid = (rank_obs - rank_pred)
  ) %>% 
  mutate(
    split = factor(split, levels = names(split_labels))
  )
n_ranks <- sum(predictions$has_rank)
predictions$rank_obs <- NA_real_
predictions$rank_pred <- NA_real_
predictions$rank_resid <- NA_real_
predictions$z_obs <- NA_real_
predictions$z_pred <- NA_real_
if (n_ranks > 0) {
  predictions$rank_obs[predictions$has_rank] <- (rank(predictions$value[predictions$has_rank]) - 1) / (n_ranks - 1)
  predictions$rank_pred[predictions$has_rank] <- (rank(predictions$score[predictions$has_rank]) - 1) / (n_ranks - 1)
  predictions$rank_resid = predictions$rank_obs - predictions$rank_pred
  
  mean_obs <- mean(predictions$log_value[predictions$has_rank])
  sd_obs <- sd(predictions$log_value[predictions$has_rank])
  mean_pred <- mean(predictions$score[predictions$has_rank])
  sd_pred <- sd(predictions$score[predictions$has_rank])
  predictions$z_obs[predictions$has_rank] <- (predictions$log_value[predictions$has_rank] - mean_obs) / sd_obs
  predictions$z_pred[predictions$has_rank] <- (predictions$score[predictions$has_rank] - mean_pred) / sd_pred
}

predictions <- predictions %>% 
  complete(date = seq.Date(min(predictions$date), max(predictions$date), by = "1 day")) %>%
  mutate(
    timestamp = coalesce(timestamp, as.POSIXct(date))
  )

predictions_day <- predictions %>%
  filter(!is.na(score), !is.na(value)) %>% 
  group_by(split, date) %>%
  summarise(
    value = mean(value),
    score = mean(score),
    .groups = "drop"
  ) %>%
  mutate(
    rank_obs = rank(value) / n(),
    rank_pred = rank(score) / n()
  )
  
if (any(!is.na(predictions$value))) {
  safe_cor <- possibly(cor, otherwise = NA_real_)
  tau <- predictions %>% 
    bind_rows(
      predictions %>% 
        filter(split %in% c("test-in", "test-out")) %>% 
        transmute(
          split = "test-total",
          value,
          score
        ),
      predictions %>% 
        transmute(
          split = "total",
          value,
          score
        )
    ) %>% 
    filter(!is.na(score)) %>% 
    group_by(split) %>% 
    summarise(
      n = sum(!is.na(score)),
      tau = safe_cor(value, score, method = "kendall", use = "complete.obs")
    ) %>%
    select(split, tau) %>% 
    deframe()
  
  tau_day <- predictions_day %>% 
    bind_rows(
      predictions_day %>% 
        filter(split %in% c("test-in", "test-out")) %>% 
        transmute(
          split = "test-total",
          value,
          score
        ),
      predictions_day %>% 
        transmute(
          split = "total",
          value,
          score
        )
    ) %>% 
    filter(!is.na(score)) %>% 
    group_by(split) %>% 
    summarise(
      n = sum(!is.na(score)),
      tau = safe_cor(value, score, method = "kendall", use = "complete.obs")
    ) %>%
    select(split, tau) %>% 
    deframe()
} else {
  predictions$rank_obs <- NA_real_
  predictions$rank_resid <- NA_real_
  predictions_day$rank_obs <- NA_real_
  predictions_day$rank_resid <- NA_real_

  tau <- list(
    train = NA_real_,
    val = NA_real_,
    `test-in` = NA_real_,
    `test-out` = NA_real_,
    `test-total` = NA_real_,
    total = NA_real_
  )
  tau_day <- list(
    train = NA_real_,
    val = NA_real_,
    `test-in` = NA_real_,
    `test-out` = NA_real_,
    `test-total` = NA_real_,
    total = NA_real_
  )
}
```

```txt
Created:         `r Sys.time()`

Station:         `r station$name` (id=`r station$id`)
Model:           `r params$model_code`

Images:
  Start:         `r min(predictions$timestamp)`
  End:           `r max(predictions$timestamp)`
  # Images:      `r scales::comma(nrow(predictions))`

Annotations:
  Source:        `r rank_input$pairs$source`
  # Train Pairs: `r rank_input$pairs$splits$train`
  # Val Pairs:   `r rank_input$pairs$splits$val`
  Period:        `r as_date(rank_input$pairs$start)` to `r as_date(rank_input$pairs$end)`
  Notes:         `r rank_input$notes`

Training:
  # Epochs:      `r train_args$epochs`
  Learn Rate:    `r train_args$lr`

Performance (Kendall Tau):      
  Train:         `r sprintf("%.2f", tau["train"])`
  Val:           `r sprintf("%.2f", tau["val"])`
  Test (In):     `r sprintf("%.2f", tau["test-in"])`
  Test (Out):    `r sprintf("%.2f", tau["test-out"])`
  Test (All):    `r sprintf("%.2f", tau["test-total"])`
  Overall:       `r sprintf("%.2f", tau["total"])`
```

## Input Data

### Images

```{r images-ts, fig.width=10, fig.height=6}
p_value <- images %>%
  ggplot(aes(timestamp, log10(value))) +
  geom_line() +
  geom_point(aes(color = split), size = 0.5, alpha = 0.5) +
  scale_x_datetime(date_labels = "%b %Y", date_breaks = "2 months", expand = expansion()) +
  scale_color_brewer("Split", palette = "Set1", labels = split_labels) +
  guides(
    color = guide_legend(override.aes = list(size = 4, alpha = 1))
  ) +
  labs(x = NULL, y = "Obs log10(Flow [cfs])") +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)
  )

p_splits <- images %>% 
  mutate(
    group = if_else(split %in% c("train", "val"), "train", "test"),
    group = factor(group, levels = c("train", "test"))
  ) %>%
  ggplot(aes(timestamp)) +
  geom_rug(aes(color = split), length = unit(100, "mm")) +
  scale_x_datetime(
    date_labels = "%b %Y", date_breaks = "2 months", expand = expansion(),
    limits = range(images$timestamp)
  ) +
  scale_color_brewer("Split", palette = "Set1", drop = FALSE, labels = split_labels, guide = "none") +
  facet_wrap(vars(group), ncol = 1, strip.position = "left", labeller = labeller(group = c(
    "train" = "Annotated",
    "test" = "Unannotated"
  ))) +
  labs(x = NULL) +
  theme_bw() +
  theme(
    strip.placement = "outside",
    strip.background = element_blank(),
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)
  )

wrap_plots(p_value, p_splits, ncol = 1, heights = c(0.6, 0.4)) +
  plot_layout(guides = "collect") +
  plot_annotation(title = "Timeseries of Obs. Flow and Image Splits")
```


```{r images-hist, fig.width=10, fig.height=6}
images %>%
  ggplot(aes(value)) +
  geom_histogram(aes(fill = split)) +
  scale_fill_brewer("Split", palette = "Set1", labels = split_labels) +
  scale_x_log10() +
  facet_wrap(vars(split), labeller = labeller(split = split_labels)) +
  guides(
    color = guide_legend(override.aes = list(size = 4, alpha = 1))
  ) +
  labs(
    x = "log10(Flow [cfs])",
    y = "# Images",
    title = "Obs. Flow Distributions by Image Split"
  ) +
  theme_bw()
```

```{r images-cumul, fig.width=10, fig.height=4}
images %>%
  ggplot(aes(value)) +
  stat_ecdf(aes(color = split)) +
  scale_x_log10() +
  scale_color_brewer("Split", palette = "Set1", labels = split_labels) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 8), labels = scales::percent, expand = expansion()) +
  guides(
    color = guide_legend(override.aes = list(size = 4, alpha = 1))
  ) +
  labs(
    x = "log10(Flow [cfs])",
    y = "Cumul. Frequency (%)",
    title = "Cumulative Frequency Distribution of Obs. Flow by Image Split"
  ) +
  theme_bw()
```


### Annotations

```{r annotation_timestamp, fig.width=10, fig.height=5}
p1 <- annotations %>% 
  ggplot(aes(right.timestamp, left.timestamp)) +
  geom_point(aes(color = rank), alpha = 0.25) +
  scale_color_brewer(palette = "Set1") +
  scale_x_datetime(date_breaks = "2 months", date_labels = "%b %Y") +
  scale_y_datetime(date_breaks = "2 months", date_labels = "%b %Y") +
  labs(
    x = "Right: Timestamp",
    y = "Left: Timestamp",
    title = "Annotation Pairs by Timestamp"
  ) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
    aspect.ratio = 1
  )
p2 <- annotations %>% 
  ggplot(aes(pmax(right.value, 0.1), pmax(left.value, 0.1))) +
  geom_point(aes(color = rank), alpha = 0.25) +
  scale_color_brewer(palette = "Set1") +
  scale_x_log10() +
  scale_y_log10() +
  labs(
    x = "Right: log10[Obs. Flow (cfs)]",
    y = "Left: log10[Obs. Flow (cfs)]",
    title = "Annotation Pairs by Obs. Flow"
  ) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
    aspect.ratio = 1
  )
(p1 | p2) +
  plot_layout(guides = "collect")
```


## Model Training

### Loss Function

```{r train_loss, fig.width=8, fig.height=4}
metrics %>% 
  mutate(final = val_loss == min(val_loss)) %>% 
  pivot_longer(-c(epoch, final), names_to = "split") %>% 
  mutate(
    split = factor(str_remove(split, "_loss"), levels = c("train", "val", "test"))
  ) %>% 
  ggplot(aes(epoch, value, color = split)) +
  geom_point() +
  geom_line() +
  geom_point(
    data = ~ filter(., final),
    aes(size = "Final Model"),
    shape = 21, color = "black"
  ) +
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
  scale_y_continuous(limits = c(0, NA), expand = expansion(c(0, 0.05))) +
  scale_color_brewer("Split", palette = "Set1", labels = split_labels) +
  scale_size_manual(values = 5) +
  guides(
    color = guide_legend(order = 1),
    size = guide_legend(order = 2)
  ) +
  labs(
    x = "Epoch",
    y = "Loss",
    size = NULL
  ) +
  theme_bw()
```

## Model Predictions

### Timeseries

```{r ts_value, fig.height=12, fig.width=10}
p_value <- predictions %>%
  ggplot(aes(timestamp, value)) +
  geom_line() +
  scale_x_datetime(date_labels = "%b %Y", date_breaks = "2 months", expand = expansion()) +
  scale_y_log10() +
  labs(x = NULL, y = "Observed\nlog10(Flow [cfs])") +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)
  )
p_score <- predictions %>%
  ggplot(aes(timestamp, score)) +
  geom_line() +
  scale_x_datetime(date_labels = "%b %Y", date_breaks = "2 months", expand = expansion()) +
  labs(x = NULL, y = "Predicted\n Image Score") +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)
  )
p_rank <- predictions %>%
  filter(!is.na(split)) %>% 
  ggplot(aes(timestamp)) +
  geom_line(aes(y = rank_obs)) +
  geom_point(aes(y = rank_pred, color = split), size = 0.5, alpha = 0.5) +
  scale_x_datetime(date_labels = "%b %Y", date_breaks = "2 months", expand = expansion()) +
  scale_y_continuous(labels = scales::percent, breaks = scales::pretty_breaks(n = 8), limits = c(0, 1), expand = expansion()) +
  scale_color_brewer("Split", palette = "Set1", labels = split_labels) +
  labs(x = NULL, y = "Rank\nPercentile", linetype = NULL) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)
  )
p_z <- predictions %>%
  filter(!is.na(split)) %>% 
  ggplot(aes(timestamp)) +
  geom_line(aes(y = z_obs)) +
  geom_point(aes(y = z_pred, color = split), size = 0.5, alpha = 0.5) +
  scale_x_datetime(date_labels = "%b %Y", date_breaks = "2 months", expand = expansion()) +
  scale_color_brewer("Split", palette = "Set1", labels = split_labels) +
  labs(x = NULL, y = "Z Score", linetype = NULL) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)
  )

wrap_plots(p_value, p_score, p_rank, p_z, ncol = 1) +
  plot_layout(guides = "collect") +
  plot_annotation(title = "Timeseries of Observed Flow, Predited Scores, Percentile Ranks, and Z Scores")
```

### Scatter Plots

```{r splot, fig.height=12}
p_value <- predictions %>%
  filter(!is.na(split)) %>% 
  ggplot(aes(value, score)) +
  geom_point(aes(color = split), size = 0.5, alpha = 0.5) +
  geom_smooth(method = "lm", se = FALSE, formula = y ~ x, color = "black") +
  scale_color_brewer("Split", palette = "Set1", labels = split_labels) +
  scale_x_log10() +
  labs(
    x = "Obs Flow (cfs)",
    y = "Predicted Score",
    title = "Obs Flow vs Pred Score"
  ) +
  guides(color = guide_legend(override.aes = list(size = 1))) +
  facet_wrap(vars(split), ncol = 1, labeller = labeller(split = split_labels)) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
    aspect.ratio = 1
  )
p_rank <- predictions %>%
  filter(!is.na(split)) %>% 
  ggplot(aes(rank_obs, rank_pred)) +
  geom_point(aes(color = split), size = 0.5, alpha = 0.5) +
  geom_abline(color = "black", linewidth = 1) +
  scale_color_brewer("Split", palette = "Set1", labels = split_labels) +
  scale_x_continuous(breaks = scales::pretty_breaks(), labels = scales::percent_format(accuracy = 1), expand = expansion(), limits = c(0, NA)) +
  scale_y_continuous(breaks = scales::pretty_breaks(), labels = scales::percent_format(accuracy = 1), expand = expansion(), limits = c(0, NA)) +
  labs(
    x = "Observed Rank",
    y = "Predicted Rank",
    title = "Obs vs. Pred Ranks"
  ) +
  guides(color = guide_legend(override.aes = list(size = 1))) +
  facet_wrap(vars(split), ncol = 1, labeller = labeller(split = split_labels)) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
    aspect.ratio = 1
  )
p_z <- predictions %>%
  filter(!is.na(split)) %>% 
  ggplot(aes(z_obs, z_pred)) +
  geom_point(aes(color = split), size = 0.5, alpha = 0.5) +
  geom_abline(color = "black", linewidth = 1) +
  scale_color_brewer("Split", palette = "Set1", labels = split_labels) +
  labs(
    x = "Observed Z Score",
    y = "Predicted Z Score",
    title = "Obs vs. Pred Z Scores"
  ) +
  guides(color = guide_legend(override.aes = list(size = 1))) +
  facet_wrap(vars(split), ncol = 1, labeller = labeller(split = split_labels)) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
    aspect.ratio = 1
  )
if (any(!is.na(predictions$value))) {
  wrap_plots(p_value, p_rank, p_z, nrow = 1) +
    plot_layout(guides = "collect")
} else {
  print("No observed data")
}
```

### Residuals

```{r resid_ts}
predictions %>%
  filter(!is.na(split)) %>% 
  ggplot(aes(timestamp, rank_resid)) +
  geom_hline(yintercept = 0) +
  geom_point(aes(color = split), size = 0.5, alpha = 0.5) +
  scale_color_brewer("Split", palette = "Set1", labels = split_labels) +
  scale_x_datetime(date_labels = "%b %Y", date_breaks = "2 months", expand = expansion()) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 8), labels = scales::percent_format(accuracy = 1), expand = expansion()) +
  guides(color = guide_legend(override.aes = list(size = 1))) +
  facet_wrap(vars(split), labeller = labeller(split = split_labels)) +
  labs(
    x = "Date",
    y = "Percentile Rank Residual (Obs-Pred)",
    title = "Timeseries of Percentile Rank Residuals (Obs - Pred)"
  ) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
```

```{r resid_splot, fig.height = 12}
p1 <- predictions %>%
  filter(!is.na(split)) %>% 
  ggplot(aes(rank_pred, rank_resid)) +
  geom_hline(yintercept = 0) +
  geom_point(size = 0.2) +
  geom_point(aes(color = split), size = 0.5, alpha = 0.5) +
  scale_color_brewer("Split", palette = "Set1", labels = split_labels) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 8), labels = scales::percent_format(accuracy = 1), expand = expansion()) +
  scale_x_continuous(breaks = scales::pretty_breaks(n = 4), labels = scales::percent_format(accuracy = 1), expand = expansion(), limits = c(0, 1)) +
  guides(color = guide_legend(override.aes = list(size = 1))) +
  facet_wrap(vars(split), ncol = 1, labeller = labeller(split = split_labels)) +
  labs(
    x = "Predicted Percentile Rank",
    y = "Percentile Rank Residual (Obs-Pred)",
    title = "Percentile Rank Residuals vs Fitted"
  ) +
  theme_bw() +
  theme(aspect.ratio = 1)

p2 <- predictions %>%
  filter(!is.na(rank_resid)) %>% 
  ggplot(aes(hour(timestamp), rank_resid)) +
  geom_hline(yintercept = 0) +
  geom_jitter(aes(color = split), height = 0, size = 0.5, alpha = 0.5) +
  scale_color_brewer("Split", palette = "Set1", labels = split_labels) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 6), labels = scales::percent_format(accuracy = 1), expand = expansion()) +
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
  guides(color = guide_legend(override.aes = list(size = 1))) +
  facet_wrap(vars(split), ncol = 1, labeller = labeller(split = split_labels)) +
  labs(
    x = "Hour of Day",
    y = "Percentile Rank Residual (Obs-Pred)",
    title = "Diurnal Pattern"
  ) +
  theme_bw() +
  theme(aspect.ratio = 1)

p3 <- predictions %>%
  filter(!is.na(rank_resid)) %>% 
  ggplot(aes(ymd(20001231) + days(yday(timestamp)), rank_resid)) +
  geom_hline(yintercept = 0) +
  geom_jitter(aes(color = split), height = 0, size = 0.5, alpha = 0.5) +
  scale_color_brewer("Split", palette = "Set1", labels = split_labels) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 8), labels = scales::percent_format(accuracy = 1), expand = expansion()) +
  scale_x_date(date_breaks = "2 months", date_labels = "%b", limits = ymd(c(20010101, 20011231)), expand = expansion()) +
  guides(color = guide_legend(override.aes = list(size = 1))) +
  facet_wrap(vars(split), ncol = 1, labeller = labeller(split = split_labels)) +
  labs(
    x = "Day of Year",
    y = "Percentile Rank Residual (Obs-Pred)",
    title = "Seasonal Pattern"
  ) +
  theme_bw() +
  theme(aspect.ratio = 1)
if (any(!is.na(predictions$value))) {
  wrap_plots(p1, p2, p3, nrow = 1) +
    plot_layout(guides = "collect")
} else {
  print("No observed data.")
}
```


### Daily Aggregation

Note: Daily mean values computed using only daytime images (7AM-7PM)

```text
Performance (Kendall Tau):      
  Train:         `r sprintf("%.2f", tau_day["train"])`
  Val:           `r sprintf("%.2f", tau_day["val"])`
  Test (In):     `r sprintf("%.2f", tau_day["test-in"])`
  Test (Out):    `r sprintf("%.2f", tau_day["test-out"])`
  Test (All):    `r sprintf("%.2f", tau_day["test-total"])`
  Overall:       `r sprintf("%.2f", tau_day["total"])`
```

```{r day_ts, fig.height=4}
predictions_day %>%
  complete(date = seq.Date(min(date), max(date), 1)) %>%
  ggplot(aes(date)) +
  geom_line(aes(y = rank_pred, linetype = "Predicted"), color = "black") +
  geom_point(aes(y = rank_obs, color = split), size = 1) +
  scale_color_brewer("Split", palette = "Set1", labels = split_labels) +
  scale_x_date(date_labels = "%b %Y", date_breaks = "2 months", expand = expansion()) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 8), labels = scales::percent_format(accuracy = 1), expand = expansion()) +
  labs(
    x = "Date",
    y = "Percentile Rank",
    linetype = NULL,
    title = "Daily Timeseries of Observed and Predicted Ranks"
  ) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)
  )
```


```{r day_splot, fig.height=4}
predictions_day %>%
  ggplot(aes(rank_obs, rank_pred)) +
  geom_point(aes(color = split), size = 1, alpha = 0.5) +
  geom_abline(color = "black") +
  scale_color_brewer("Split", palette = "Set1", labels = split_labels) +
  scale_x_continuous(breaks = scales::pretty_breaks(), expand = expansion(), limits = c(0, 1), labels = scales::percent) +
  scale_y_continuous(breaks = scales::pretty_breaks(), expand = expansion(), limits = c(0, 1), labels = scales::percent) +
  labs(
    x = "Observed Rank",
    y = "Predicted Rank",
    title = "Observed vs. Predicted Daily Ranks"
  ) +
  facet_wrap(vars(split), nrow = 1, labeller = labeller(split = split_labels)) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
    aspect.ratio = 1
  )
```
